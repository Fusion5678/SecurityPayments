name: SecurityPayments API CI/CD Pipeline

on:
  push:
    branches: [ master ]
    paths:
      - 'PaymentsAPI/**'
      - '.github/workflows/api-ci.yml'
      - '.env.ci'
  pull_request:
    branches: [ master ]
    paths:
      - 'PaymentsAPI/**'
      - '.github/workflows/api-ci.yml'
      - '.env.ci'

# Environment variables will be loaded from .env.ci file in the workflow steps

jobs:
  # -------------------------
  # Build & Test Job
  # -------------------------
  build-and-test:
    name: Build and Test API
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Load environment variables from .env.ci
        uses: xom9ikk/dotenv@v2
        with:
          path: .env.ci
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        
      - name: Restore dependencies
        run: dotnet restore ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      
      - name: Build project
        run: dotnet build ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}
      
      - name: Run tests
        run: dotnet test ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --collect:"XPlat Code Coverage"
      
      - name: Publish API
        run: dotnet publish ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --output ./publish/api --no-build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build-artifacts
          path: ./publish/api/
          retention-days: 1

  # -------------------------
  # Deploy to Azure (Production)
  # -------------------------
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Load environment variables from .env.ci
        uses: xom9ikk/dotenv@v2
        with:
          path: .env.ci
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build-artifacts
          path: ./publish/api/
        
      - name: Deploy to Azure App Service (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_PROD }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_API_PROD }}
          package: ./publish/api/
        
      - name: Update App Service Configuration
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_PROD }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_API_PROD }}
          app-settings-json: |
            {
              "ASPNETCORE_ENVIRONMENT": "Production",
              "ConnectionStrings__DefaultConnection": "${{ secrets.SQL_CONNECTION_STRING }}"
            }
        
      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          echo "Testing API health endpoint..."
          curl -f https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net/api/auth/csrf-token || exit 1
          echo "API deployment successful!"
        
      - name: Notify Deployment Success
        if: success()
        run: |
          echo "‚úÖ SecurityPayments API successfully deployed to production!"
          echo "üåê API URL: https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net"
          echo "üìä Swagger UI: https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net/swagger"
        
      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "‚ùå SecurityPayments API deployment failed!"
          echo "Please check the logs and try again."
