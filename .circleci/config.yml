version: 2.1

jobs:
  sonarqube-analysis:
    docker:
      - image: cimg/openjdk:17.0
    resource_class: medium
    working_directory: ~/project
    environment:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
    
    steps:
      - checkout:
          fetch-depth: 0  # Full git history for better analysis

      # Verify Java version and ensure Java 17
      - run:
          name: Verify Java Version
          command: |
            echo "üîç Checking Java version..."
            java -version
            echo "JAVA_HOME: $JAVA_HOME"
            # Ensure we're using Java 17
            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
            export PATH=$JAVA_HOME/bin:$PATH
            echo "Updated JAVA_HOME: $JAVA_HOME"
            java -version
            echo "‚úÖ Java 17 environment ready"

      # Display project structure safely
      - run:
          name: Display Project Structure
          command: |
            echo "üìÅ Project Structure:"
            find . -type f -name "*.cs" | head -10 || true
            find . \( -type f -name "*.tsx" -o -name "*.ts" \) | head -10 || true
            echo "üéØ Ready for SonarQube analysis"

      # COMMENTED OUT FOR SONARQUBE TESTING ONLY
      # # Install .NET SDK 8.0
      # - run:
      #     name: Install .NET SDK
      #     command: |
      #       wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
      #       sudo dpkg -i packages-microsoft-prod.deb
      #       sudo apt-get update
      #       sudo apt-get install -y dotnet-sdk-8.0

      # # Install Node.js 18
      # - run:
      #     name: Install Node.js
      #     command: |
      #       curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
      #       sudo apt-get install -y nodejs

      # # Cache .NET packages
      # - restore_cache:
      #     keys:
      #       - dotnet-deps-v1-{{ checksum "PaymentsAPI/PaymentsAPI.csproj" }}
      #       - dotnet-deps-v1-

      # # Cache Node modules  
      # - restore_cache:
      #     keys:
      #       - node-deps-v1-{{ checksum "payments-frontend/package-lock.json" }}
      #       - node-deps-v1-

      # # Install .NET dependencies
      # - run:
      #     name: Install .NET dependencies
      #     command: |
      #       cd PaymentsAPI
      #       dotnet restore
      #       echo "‚úÖ .NET packages restored"

      # # Install Node dependencies
      # - run:
      #     name: Install Node dependencies
      #     command: |
      #       cd payments-frontend
      #       npm ci
      #       echo "‚úÖ Node dependencies installed"

      # # Save caches for faster future builds
      # - save_cache:
      #     key: dotnet-deps-v1-{{ checksum "PaymentsAPI/PaymentsAPI.csproj" }}
      #     paths:
      #       - ~/.nuget/packages

      # - save_cache:
      #     key: node-deps-v1-{{ checksum "payments-frontend/package-lock.json" }}
      #     paths:
      #       - payments-frontend/node_modules

      # # Build .NET API (required for SonarQube analysis)
      # - run:
      #     name: Build .NET API
      #     command: |
      #       cd PaymentsAPI
      #       echo "üî® Building .NET API..."
      #       dotnet build --configuration Release --no-restore --verbosity minimal
      #       echo "‚úÖ API build completed"

      # # Build React Frontend
      # - run:
      #     name: Build React Frontend
      #     command: |
      #       cd payments-frontend
      #       echo "üî® Building React Frontend..."
      #       npm run build
      #       echo "‚úÖ Frontend build completed"

      # # Run ESLint for additional code quality insights
      # - run:
      #     name: Run ESLint Code Quality Check
      #     command: |
      #       cd payments-frontend
      #       echo "üîç Running ESLint analysis..."
      #       npm run lint || echo "‚ö†Ô∏è ESLint found issues (non-blocking)"
      #     continue-on-error: true

      # Install SonarScanner CLI manually (Docker not available in CircleCI)
      - run:
          name: Install SonarScanner CLI
          command: |
            echo "üì¶ Installing SonarScanner CLI manually..."
            # Ensure Java 17 is active
            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
            export PATH=$JAVA_HOME/bin:$PATH
            echo "Using Java version:"
            java -version
            
            # Download and install SonarScanner
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
            unzip sonar-scanner-cli-4.8.0.2856-linux.zip
            
            # Check what directory was created and move it
            ls -la
            sudo mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
            sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
            
            # Verify installation
            sonar-scanner --version
            echo "‚úÖ SonarScanner CLI installed"

      # Run SonarCloud analysis
      - run:
          name: Run SonarCloud Analysis
          command: |
            echo "üîç Running SonarCloud analysis..."
            # Ensure Java 17 is active
            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
            export PATH=$JAVA_HOME/bin:$PATH
            
            # Run SonarScanner
            sonar-scanner \
              -Dsonar.projectKey=$SONAR_PROJECT_KEY \
              -Dsonar.organization=$SONAR_ORGANIZATION \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=$SONAR_TOKEN
            echo "‚úÖ SonarCloud analysis completed"

      # Summary
      - run:
          name: Analysis Complete
          command: |
            echo "üéâ SonarQube analysis completed!"
            echo "üìä Check results at: https://sonarcloud.io"
            echo "üîç Security hotspots and code smells detected"

workflows:
  sonar-analysis:
    jobs:
      - sonarqube-analysis:
          context: SonarCloud
          filters:
            branches:
              only:
                - master
                - dev
                - main
